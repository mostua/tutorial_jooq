<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>pl.mostua</groupId>
    <artifactId>jooq-tutorial</artifactId>
    <version>0.0.1</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.2.3.RELEASE</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>3.4.5</version>
        </dependency>

        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-meta</artifactId>
            <version>3.4.5</version>
        </dependency>

        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq-codegen</artifactId>
            <version>3.4.5</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.3-1102-jdbc41</version>
        </dependency>
    </dependencies>

    <properties>
        <java.version>1.8</java.version>
    </properties>


    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>

              <!-- Specify the maven code generator plugin -->
              <groupId>org.jooq</groupId>
              <artifactId>jooq-codegen-maven</artifactId>
              <version>3.4.5</version>

              <!-- The plugin should hook into the generate goal -->
              <executions>
                <execution>
                  <goals>
                    <goal>generate</goal>
                  </goals>
                </execution>
              </executions>

              <!-- Manage the plugin's dependency. In this example, we'll use a PostgreSQL database -->
              <dependencies>
                <dependency>
                  <groupId>org.postgresql</groupId>
                  <artifactId>postgresql</artifactId>
                  <version>9.3-1102-jdbc41</version>
                </dependency>
              </dependencies>

              <!-- Specify the plugin configuration.
                   The configuration format is the same as for the standalone code generator -->
              <configuration>

                <!-- JDBC connection parameters -->
                <jdbc>
                  <driver>org.postgresql.Driver</driver>
                  <url>jdbc:postgresql://localhost:5432/jooq_tutorial</url>
                  <user>postgres</user>
                  <password>test</password>
                </jdbc>

                <!-- Generator parameters -->
                <generator>
                  <name>org.jooq.util.DefaultGenerator</name>
                  <database>
                    <name>org.jooq.util.postgres.PostgresDatabase</name>
                    <includes>.*</includes>
                    <excludes></excludes>
                    <inputSchema>public</inputSchema>
                  </database>
                  <target>
                    <packageName>jooq_sources</packageName>
                    <directory>src/main/java</directory>
                  </target>
                  <generate>
                    <daos>true</daos>
                  </generate>
                </generator>
              </configuration>
            </plugin>   
        </plugins>
    </build>
</project>
